
[[plugins]]
repo = 'bluz71/vim-moonfly-colors'
hook_add = '''
	set background=dark
	set termguicolors " if you want to run vim in a terminal
	let g:moonflyCursorColor = 1
	colorscheme moonfly
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugins]]
repo = 'Shougo/dein.vim'

# 動かすと多重に動くせいかカッコ表示が激烈遅くなる
# [[plugins]]
# repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
	source ~/.config/nvim/plugins/airline.vim
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
# Yet Another Remote Plugin Framework for Neovim
repo = 'Shougo/denite.nvim'
hook_add = '''
	source ~/.config/nvim/plugins/denite.vim
'''

[[plugins]]
repo = 'preservim/nerdtree'
hook_add = '''
	source ~/.config/nvim/plugins/nerdtree.vim
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
    " 起動時有効
    let g:nerdtree_tabs_open_on_console_startup=1
'''
depends = ['nerdtree']

[[plugins]]
# Yet Another Remote Plugin Framework for Neovim
repo = 'roxma/nvim-yarp'
if = '''!has('nvim')'''

[[plugins]]
# Yet Another Remote Plugin Framework for Neovim
repo = 'roxma/vim-hug-neovim-rpc'
if = '''!has('nvim')'''

[[plugins]]
repo = 'neovim/python-client'
if = '''!has('nvim')'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = '0'


[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = '0'

[[plugins]]
repo = 'nvim-lua/popup.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
hook_add = '''
	source ~/.config/nvim/plugins/telescope.vim
'''

[[plugins]]
repo = 'mattesgroeger/vim-bookmarks'
hook_add = '''
	source ~/.config/nvim/plugins/bookmark.vim
'''

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'scrooloose/nerdcommenter'
hook_add = '''
	source ~/.config/nvim/plugins/nerdcommenter.vim
'''

[[plugins]]
repo = 'ncm2/float-preview.nvim.git'

[[plugins]]
repo='prabirshrestha/async.vim'

[[plugins]]
repo='prabirshrestha/vim-lsp'
hook_add='''
if executable('clangd')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'clangd',
        \ 'cmd': {server_info->['clangd']},
        \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
        \ })
endif

let g:lsp_signs_enabled = 1         " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode

let g:lsp_signs_error = {'text': '✗'}
let g:lsp_signs_warning = {'text': '‼'}
'''

[[plugins]]
repo='prabirshrestha/asyncomplete.vim'
hook_add='''
	inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
	inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
	inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
'''

[[plugins]]
repo='prabirshrestha/asyncomplete-lsp.vim'

[[plugins]]
repo='prabirshrestha/asyncomplete-neosnippet.vim'
hook_add='''
call asyncomplete#register_source(asyncomplete#sources#neosnippet#get_source_options({
    \ 'name': 'neosnippet',
    \ 'whitelist': ['*'],
    \ 'completor': function('asyncomplete#sources#neosnippet#completor'),
    \ }))
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
'''

